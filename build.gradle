/*
 *
 * DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE
 * Version 2, December 2004
 *
 * Copyright (C) 2021 Cephetir
 *
 * Everyone is permitted to copy and distribute verbatim or modified
 * copies of this license document, and changing it is allowed as long
 * as the name is changed.
 *
 * DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE
 * TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
 *
 *  0. You just DO WHAT THE FUCK YOU WANT TO.
 */

plugins {
    id "net.minecraftforge.gradle.forge" version "8708bf3e0"
    id "com.github.johnrengelman.shadow" version "6.1.0"
    id "org.spongepowered.mixin" version "d5f9873"
    id "org.jetbrains.kotlin.jvm" version "1.6.21"
    id "java"
}

version = "3.0"
group = "me.cephetir.skyskipped"
archivesBaseName = "SkySkipped"

sourceCompatibility = targetCompatibility = 1.8
compileJava.options.encoding = 'UTF-8'

sourceSets {
    main {
        ext.refMap = "mixins.sm.refmap.json"
        output.resourcesDir = file("${buildDir}/classes/java/main")
    }
}

minecraft {
    version = "1.8.9-11.15.1.2318-1.8.9"
    runDir = "run"
    mappings = "stable_22"
    makeObfSourceJar = false

    clientRunArgs += "--mixin mixins.sm.json"
    clientRunArgs += '--tweakClass gg.essential.loader.stage0.EssentialSetupTweaker'
}

configurations {
    include
    implementation.extendsFrom(include)
}

repositories {
    mavenCentral()
    maven { url = "https://repo.sk1er.club/repository/maven-public/" }
    maven { url = "https://jitpack.io/" }
    maven { url = "https://repo.spongepowered.org/repository/maven-public/" }
}

dependencies {
    include('gg.essential:loader-launchwrapper:1.1.3')
    implementation('gg.essential:essential-1.8.9-forge:1813')

    include('com.github.jagrosh:DiscordIPC:e29d6d8') {
        exclude module: 'log4j'
    }

    implementation('org.projectlombok:lombok:1.18.24')
    annotationProcessor('org.projectlombok:lombok:1.18.22')

    implementation('org.spongepowered:mixin:0.8.5-SNAPSHOT')
    annotationProcessor('org.spongepowered:mixin:0.7.11-SNAPSHOT')

    implementation(files("libs/Pizza_Client-1.1.3-pre1.jar"))
    implementation(files("libs/ChromaHUD-3.0.jar"))

    include(files("libs/DS-Desktop-Notify.jar"))
}

mixin {
    add sourceSets.main, "mixins.sm.refmap.json"
    defaultObfuscationEnv searge
}

jar {
    manifest.attributes(
            "ForceLoadAsMod": true,
            'ModSide': 'CLIENT',
            "TweakClass": "gg.essential.loader.stage0.EssentialSetupTweaker",
            "TweakOrder": "0",
            'MixinConfigs': "mixins.sm.json",
    )
    enabled = false
}

sourceJar {
    enabled = false
}

shadowJar {
    archiveClassifier.set("")
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    configurations = [project.configurations.include]

    exclude "LICENSE.md"
    exclude "pack.mcmeta"
    exclude "dummyThing"
    exclude "**/module-info.class"
    exclude "*.so"
    exclude "*.dylib"
    exclude "*.dll"
    exclude "*.jnilib"
    exclude "ibxm/**"
    exclude "com/jcraft/**"
    exclude "org/lwjgl/**"
    exclude "net/java/**"

    exclude "META-INF/proguard/**"
    exclude "META-INF/maven/**"
    exclude "META-INF/versions/**"
    exclude "META-INF/com.android.tools/**"

    exclude "fabric.mod.json"
}

tasks.reobfJar.dependsOn tasks.shadowJar

reobf {
    shadowJar {
        classpath = sourceSets.main.compileClasspath
    }
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    filesMatching("mcmod.info") {
        expand(
                "version": project.version,
                "mcversion": project.minecraft.version
        )
    }
    rename '(.+_at.cfg)', 'META-INF/$1'
}
